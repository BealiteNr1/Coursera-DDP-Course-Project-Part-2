ucscDb <- dbConnect(MySQL(),user='root',host='localhost')
ucscDb <- dbConnect(MySQL(),user="root",host="localhost")
ucscDb <- dbConnect(MySQL(),user="root",host="localhost:3306")
ucscDb <- dbConnect(MySQL(),user="root",host="127.0.0.1:3306")
install.packages("dbConnect")
library(dbConnect)
ucscDb <- dbConnect(MySQL(),user="root",host="localhost",password="CbSCM2013")
dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(fhdf5)
library(rhdf5)
install.packages("lattice")
install.packages("grid")
library(grid)
library(lattice)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
nrow(mpg)
ncol(mpg)
colnames(mpg)
mpg[1,]
mpg[,1]
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
swirl()
library(swirl)
swirl()
r.version.dtring
r.version.string
r.Version.string
R.version.string
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
swirl()
swirl()
install_from_swirl("Statistical Inference")
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(rexp(1000, lambda))
hist(rexp(1000, 0.2))
lambda <- 0.2
n <- 1000
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(n, lambda)))
hist(mns)
lambda <- 0.2
n <- 40
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(n, lambda)))
hist(mns)
lambda <- 0.2
nsim <- 1000
hist(rexp(nsim, lambda),20)
lambda <- 0.2
nsim <- 1000
hist(rexp(nsim, lambda),50)
?hist
hist(rexp(nsim, lambda),50, main="1000 random exponentials with lambda = 0.2")
hist(rexp(nsim, lambda),50, main="1000 random exponentials with lambda = 0.2", xlab="random number")
mean(mns)
?set.seed
var(mns)
sqrt(40)
library(datasets)
mtcars
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(mns,50)
xfit<-seq(min(mns),max(mns),length=40)
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(mns,50)
xfit<-seq(min(mns),max(mns),length=5)
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(mns,50)
xfit<-seq(min(mns),max(mns),length=5)
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
yfit <- yfit*diff(h$mids[1:2])*length(mns)
lines(xfit, yfit, col="blue", lwd=2)
x <- mtcars$mpg
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon",
main="Histogram with Normal Curve")
xfit<-seq(min(x),max(x),length=40)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
h
hist(mns,50)
h <- hist(mns,50)
xfit<-seq(min(mns),max(mns),length=5)
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
yfit <- yfit*diff(h$mids[1:2])*length(mns)
lines(xfit, yfit, col="blue", lwd=2)
h
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
yfit
xfit
xfit<-seq(min(mns),max(mns),length=50)
xfit
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
yfit
yfit <- yfit*diff(h$mids[1:2])*length(mns)
lines(xfit, yfit, col="blue", lwd=2)
h <- hist(mns,50)
xfit<-seq(min(mns),max(mns),length=100)
yfit<-dnorm(xfit,mean=mean(mns),sd=sd(mns))
yfit <- yfit*diff(h$mids[1:2])*length(mns)
lines(xfit, yfit, col="blue", lwd=2)
summary(ToothGrow)
library(datasets)
ToothGrowth
class(ToothGrowth )
summary(ToothGrow)
data(sleep)
head(sleep)
qt(0.975,9)
qt(0.975,8)
qt(0.975,1)
qt(0.975,2)
qt(0.975,2000)
qn(0.975)
qnorm(0.975)
qt(0.975,20000)
qt(0.975,200000)
data(ChickWeight)
class(ChickWeight)
head(ChickWeight)
head(ChickWeight,20)
names(ToothGrowth)
nrow(ToothGrowth)
file.exists(Sys.which('texi2dvi'))
.rs.istexinstalled()
str(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
ToothGrowth
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(dose ~ len | supp, data = ToothGrowth, panel = panel.smooth,
+        xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ supp | dose, data = ToothGrowth, panel = panel.smooth,
+        xlab = "ToothGrowth data: length vs dose, given type of supplement")
sapply(ToothGrowth, class)
coplot(len ~ supp | as.factor(dose), data = ToothGrowth, panel = panel.smooth,
+        xlab = "ToothGrowth data: length vs supp, given type of supplement")
tg <- ToothGrowth
colnames(tg)
tg$dose <- as.factor(tg$dose)
sapply(tg, class)
coplot(len ~ supp | as.factor(dose), data = tg, panel = panel.smooth,
+        xlab = "ToothGrowth data: length vs supp, given type of supplement")
coplot(len ~ supp | dose, data = tg, panel = panel.smooth,
+        xlab = "ToothGrowth data: length vs supp, given type of supplement")
names(tg)
coplot(len ~ supp | dose, data = ToothGrowth, panel = panel.smooth,xlab = "ToothGrowth data: length vs supp, given type of supplement")
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
+        xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ supp | dose, data = ToothGrowth, panel = panel.smooth,xlab = "ToothGrowth data: length vs supp, given type of dose")
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth, xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ supp | dose, data = ToothGrowth, panel = panel.smooth,xlab = "ToothGrowth data: length vs supp, given type of dose")
p <- ggplot(data = ToothGrowth, aes(x = dose, y = len, color = supp)) + geom_point()
p + facet_wrap(~supp)
library(ggplot)
library(ggplot2)
p <- ggplot(data = ToothGrowth, aes(x = dose, y = len, color = supp)) + geom_point()
p + facet_wrap(~supp)
tg <- ToothGrowth
tg$dose <- as.factor(tg$dose)
p <- ggplot(data = tg, aes(x = dose, y = len, color = supp)) + geom_point()
p + facet_wrap(~supp)
p <- ggplot(data = tg, aes(x = dose, y = len, color = supp)) + geom_point()
p
p <- ggplot(data = tg, aes(x = dose, y = len, color = supp)) + geom_point()
p + facet_wrap(~supp)
psupp <- ggplot(data = tg, aes(x = supp, y = len, color = dose)) + geom_point()
psupp + facet_wrap(~dose)
psupp <- ggplot(data = tg, aes(x = supp, y = len, color = dose)) + geom_boxplot()
psupp + facet_wrap(~dose)
pdose <- ggplot(data = tg, aes(x = dose, y = len, color = supp)) + geom_boxplot() + guides(fill=FALSE)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len, color = supp), fill=cond) + geom_boxplot() + guides(fill=FALSE)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len, color = supp), fill=FALSE) + geom_boxplot() + guides(fill=FALSE)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len, color = supp), fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len, color = supp), fill=TRUE) + geom_boxplot() + guides(fill=TRUE)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len), fill=supp) + geom_boxplot() + guides(fill=FALSE)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len), fill=dose) + geom_boxplot() + guides(fill=FALSE)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len), fill=dose) + geom_boxplot()
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len), fill=dose) + geom_boxplot() + guides(fill=FALSE)
pdose <- pdose +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len), colour=dose) + geom_boxplot() + guides(fill=FALSE)
pdose <- pdose +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose <- pdose +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose + facet_wrap(~supp)
pdose <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=TRUE)
pdose <- pdose +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose + facet_wrap(~supp)
?arrangeGrob
?grid.arrange
installPackages("gfridExtra")
install.packages("gfridExtra")
install.packages("gridExtra")
pdose1 <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose1 <- pdose1 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose1 <- pdose1 + facet_wrap(~supp)
pdose2 <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose2 <- pdose2 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose <- arrangeGrob(pdose1 ,pdose2, ncol=2)
pdose
library(gridExtra)
pdose1 <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose1 <- pdose1 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose1 <- pdose1 + facet_wrap(~supp)
pdose2 <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose2 <- pdose2 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose <- arrangeGrob(pdose1 ,pdose2, ncol=2)
pdose
pdose <- arrangeGrob(pdose1 ,pdose2, ncol=2, widths = c(5,2))
pdose
pdose <- arrangeGrob(pdose1 ,pdose2, ncol=2, widths = c(6,3))
pdose
psupp1 <- ggplot(data = tg, aes(x = supp, y = len), colour=supp, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
psupp1 <- psupp1 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
psupp1 <- psupp1 + facet_wrap(~dose)
psupp2 <- ggplot(data = tg, aes(x = supp, y = len), colour=supp, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
psupp2 <- psupp2 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
psupp <- arrangeGrob(psupp1 ,psupp2, ncol=2, widths = c(6,3))
psupp
tg$dose <- as.factor(tg$dose)
pdose1 <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose1 <- pdose1 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose1 <- pdose1 + facet_wrap(~supp)
pdose2 <- ggplot(data = tg, aes(x = dose, y = len), colour=dose, fill=TRUE) + geom_boxplot() + guides(fill=FALSE)
pdose2 <- pdose2 +  stat_summary(fun.y=mean, geom="point", shape=5, size=4)
pdose <- arrangeGrob(pdose1 ,pdose2, ncol=2, widths = c(6,3))
pdose
subset(tg(dose == 0.5))
tg <- ToothGrowth
tg$dose <- as.factor(tg$dose)
subset(tg(dose == 0.5))
class(tg)
tg$dose
subset(tg[dose = 0.5])
subset(tg, dose == 0.5)
tgSupp05 <- subset(tg, dose == 0.5)
t.test(supp ~ dose, paired=FALSE, var.equal=FALSE, data=tg)
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=tgSupp05)
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 0.5))
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 0.5))$conf
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 0.5))$conf
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 1.0))$conf
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 2.0))$conf
subset(tg, dose == 2.0)
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 2))$conf
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 1))$conf
subset(tg, dose == 1)
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=tg)$conf
bp <- ggplot(tg, aes(x=dose, y=len, color=dose)) +
geom_boxplot() +
theme(legend.position = "none")
# Create a dot plot
# Add the mean point and the standard deviation
dp <- ggplot(tg, aes(x=dose, y=len, fill=dose)) +
geom_dotplot(binaxis='y', stackdir='center')+
stat_summary(fun.data=mean_sdl, mult=1,
geom="pointrange", color="red")+
theme(legend.position = "none")
# Create a violin plot
vp <- ggplot(tg, aes(x=dose, y=len)) +
geom_violin()+
geom_boxplot(width=0.1)
# Create a stripchart
sc <- ggplot(tg, aes(x=dose, y=len, color=dose, shape=dose)) +
geom_jitter(position=position_jitter(0.2))+
theme(legend.position = "none")
grid.arrange(bp, dp, vp, sc, ncol=2,
main="Multiple plots on the same page")
library(gridExtra)
grid.arrange(bp, dp, vp, sc, ncol=2,
main="Multiple plots on the same page")
install.packages("Hmisc")
library(Hmisc)
library(gridExtra)
grid.arrange(bp, dp, vp, sc, ncol=2,
main="Multiple plots on the same page")
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
# 1. Create the plots
#++++++++++++++++++++++++++++++++++
# Create a box plot
bp <- ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_boxplot()
# Create a violin plot
vp <- ggplot(df, aes(x=dose, y=len, color=dose)) +
geom_violin()+
geom_boxplot(width=0.1)+
theme(legend.position="none")
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(bp)
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
bp <- bp + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
grid.arrange(bp, vp, legend, ncol=3, widths=c(2.3, 2.3, 0.8))
arrangeGrob(bp, vp, legend, ncol=3, widths=c(2.3, 2.3, 0.8))
grid.arrange(bp, vp, legend, ncol=3)
# 1. Create the plots
#++++++++++++++++++++++++++++++++++
# Create a box plot
bp <- ggplot(tg, aes(x=dose, y=len, color=dose)) +
geom_boxplot()
# Create a violin plot
vp <- ggplot(tg, aes(x=dose, y=len, color=dose)) +
geom_violin()+
geom_boxplot(width=0.1)+
theme(legend.position="none")
# 2. Save the legend
#+++++++++++++++++++++++
legend <- get_legend(bp)
# 3. Remove the legend from the box plot
#+++++++++++++++++++++++
bp <- bp + theme(legend.position="none")
# 4. Arrange ggplot2 graphs with a specific width
grid.arrange(bp, vp, legend, ncol=3, widths=c(2.3, 2.3, 0.8))
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(tg, supp == "OJ" & (dose %in% (0.5, 1))$conf
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(tg, supp == "OJ" & (dose %in% c(0.5, 1))$conf
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(tg, supp == "OJ" & (dose %in% c(0.5, 1))))$conf
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(tg, supp == "OJ" & (dose %in% c(1, 0.5))))$conf
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(tg, supp == "OJ" & (dose %in% c(2, 0.5))))$conf
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(tg, supp == "OJ" & (dose %in% c(1, 2))))$conf
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 0.5))$conf
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 1))$conf
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(tg, dose == 2))$conf
t.test(subset(tg, supp == "OJ" & dose== 0.5), subset(tg, supp == "OJ" & dose== 1), paired=FALSE, var.equal=FALSE)$conf
subset(tg, supp == "OJ" & dose== 0.5)$len
subset(tg, supp == "OJ" & dose == 1)$len
t.test(subset(tg, supp == "OJ" & dose== 0.5)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
table(tg, supp, dose)
$table
?table
table(tg$supp, tg$dose)
t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "VC" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t <- t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
class(t)
names(t)
summary(t)
t
t[1]
t[2]
t[3]
len(t)
length(t)
t <- t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)
class(t)
t
names(t)
t[4]
t[4,1]
t[5]
t[6]
t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "VC" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "VC" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
t.test(subset(tg, supp == "VC" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
t[4]
t$conf.int
t2 <- t$conf
t2
t2[1]
t$conf[1]
result <- NULL
t <- t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("OJ", 0.5, 1, t[1], t[2]))
result
result <- NULL
t <- t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("OJ", 0.5, 1, t[1], t[2]))
t <- t.test(subset(tg, supp == "VC" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("VC", 0.5, 1, t[1], t[2]))
t <- t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("OJ", 0.5, 1, t[1], t[2]))
t <- t.test(subset(tg, supp == "VC" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("VC", 0.5, 1, t[1], t[2]))
t <- t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("OJ", 0.5, 1, t[1], t[2]))
t <- t.test(subset(tg, supp == "VC" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("VC", 0.5, 1, t[1], t[2]))
result
result[,2] <- as.numeric(result[,2])
result
colnames(result) <- c("supp", "dose 1", "dose 2", "conf lower", "conf upper")
result
result <- NULL
t <- t.test(subset(tg, supp == "OJ" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("OJ", 0.5, 1, t[1], t[2]))
t <- t.test(subset(tg, supp == "VC" & dose== 1)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("VC", 0.5, 1, t[1], t[2]))
t <- t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("OJ", 0.5, 2, t[1], t[2]))
t <- t.test(subset(tg, supp == "VC" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 0.5)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("VC", 0.5, 2, t[1], t[2]))
t <- t.test(subset(tg, supp == "OJ" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("OJ", 1, 2, t[1], t[2]))
t <- t.test(subset(tg, supp == "VC" & dose== 2)$len, subset(tg, supp == "OJ" & dose == 1)$len, paired=FALSE, var.equal=FALSE)$conf
result <- rbind(result, c("VC", 1, 2, t[1], t[2]))
colnames(result) <- c("supp", "dose 1", "dose 2", "conf lower", "conf upper")
result
install.packages(c("Rcpp", "httpuv", "shiny"))
library(shiny)
setwd("C:/Daten/Armin/Weiterbildung/Coursera Data Science/DevelopingDataProducts/CourseProject")
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='bealitenr1', token='F16B4BBF22E35F8FC17D8B7856C5B568', secret='aN7PhwTEijMOkG0q4b1u5SyjRq9kBDR0eOC20fer')
setwd("C:/Daten/Armin/Weiterbildung/Coursera Data Science/DevelopingDataProducts")
library(silidfy)
install.packages("slidify")
install_github("slidify", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
setwd("C:/Daten/Armin/Weiterbildung/Coursera Data Science/DevelopingDataProducts/CourseProject")
library(slidify)
library(slidifyLibraries)
author("CourseProject")
slidify("index.Rmd")
slidify("index.Rmd")
?hist
slidify("index.Rmd")
slidify("index.Rmd")
set.seed(1)   #necessary to reproduce identical results
n1 <- 40
mns = NULL
for (i in 1 : nsim) mns = c(mns, mean(rexp(n1, lambda)))
summary(mns)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish(title = 'Developing Data Products - Course Project (Part 2)', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Developing Data Products - Course Project (Part 2)', 'index.html', host = 'rpubs')
options(rpubs.upload.method = "internal")
publish(title = 'Developing Data Products - Course Project (Part 2)', 'index.html', host = 'rpubs')
publish(title = 'Developing Data Products - Course Project (Part 2)', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Developing Data Products - Course Project (Part 2)', 'index.html', host = 'rpubs')
